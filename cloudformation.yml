AWSTemplateFormatVersion: "2010-09-09"
Description: A sample template for OpenCTI on AWS

Parameters:
  StackPrefix:
    Description: CloudFormation Stack Name Prefix
    Type: String
    Default: OpenCTI
  Stage:
    Description: Which environments to deploy the system.
    Type: String
    Default: "dev"
    AllowedValues: ["dev", "stg", "prod"]
  DomainName:
    Description: Public domain name for ALB
    Type: String
  PublicHostedZoneId:
    Description: Public hosted zone id
    Type: String
  OpenCtiAdminEmail:
    Type: String
  OpenCtiAdminPassword:
    Type: String
  EC2InstanceAMI:
    Type: AWS::EC2::Image::Id
    Default: ami-04a0ae173da5807d3 # Amazon Linux 2023 AMI - x86_64
  EC2InstanceInstanceType:
    Type: String
    Default: r5a.xlarge
  EC2InstanceVolumeType:
    Type: String
    Default: gp3
  EC2InstanceVolumeSize:
    Type: Number
    Default: 30

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: "VPC-igw"

  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "VPC Public Routes"

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.3.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.4.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  PrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # NatGatewayEIP:
  #   Type: "AWS::EC2::EIP"
  #   DependsOn: InternetGatewayAttachment
  #   Properties:
  #     Domain: vpc

  # NatGateway:
  #   Type: "AWS::EC2::NatGateway"
  #   Properties:
  #     AllocationId: !GetAtt NatGatewayEIP.AllocationId
  #     SubnetId: !Ref PublicSubnet1

  # PrivateRoute:
  #   Type: "AWS::EC2::Route"
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     DestinationCidrBlock: "0.0.0.0/0"
  #     NatGatewayId: !Ref NatGateway

  # Security Groups
  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security Group for ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: "Group"
          Value: !Ref StackPrefix

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for OpenCTI EC2 Instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: Allow access to port 8080 from ALB
          IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt
            - ALBSecurityGroup
            - GroupId
          FromPort: 8080
          ToPort: 8080
      SecurityGroupEgress:
        - Description: Allow all outbound
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Group"
          Value: !Ref StackPrefix

  # ACM
  ACM:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref PublicHostedZoneId
      ValidationMethod: DNS

  # Route53
  PublicHostedZoneRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref PublicHostedZoneId
      RecordSets:
        - Name: !Ref DomainName
          AliasTarget:
            HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt ApplicationLoadBalancer.DNSName
          Type: A

  # ALB
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: PublicRoute
    Properties:
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTPS
      Port: 443
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      Certificates:
        - CertificateArn: !Ref ACM

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 10
      Matcher:
        HttpCode: "200"
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        - Key: stickiness.enabled
          Value: "true"
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "30"
      Targets:
        - Id: !Ref EC2Instance
          Port: 8080

  # EC2InstanceProfile
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${StackPrefix}-ec2-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${StackPrefix}-ec2-instance-profile
      Roles:
        - !Ref EC2Role

  # OpenCTI EC2 Instance
  EC2Instance:
    Type: "AWS::EC2::Instance"
    Metadata:
      "AWS::CloudFormation::Init":
        configSets:
          full_install:
            - install_cfn
            - install_application
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ""
                - - |
                    [main]
                  - stack=
                  - !Ref "AWS::StackId"
                  - |+

                  - region=
                  - !Ref "AWS::Region"
                  - |+

              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ""
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - |
                    path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                  - "action=/opt/aws/bin/cfn-init -v "
                  - "         --stack "
                  - !Ref "AWS::StackName"
                  - "         --resource EC2Instance "
                  - "         --configsets full_install "
                  - "         --region "
                  - !Ref "AWS::Region"
                  - |+

                  - |
                    runas=root
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_application:
          files:
            /tmp/install_application:
              content: !Join
                - ""
                - - |
                    #!/bin/bash -e
                  - |
                    # Install required packages
                  - |
                    dnf install -y git docker java-17-amazon-corretto
                  - |
                    export HOME=/home/ec2-user
                  - |
                    export PATH=$PATH:/usr/local/bin
                  - |
                    DOCKER_CONFIG=${DOCKER_CONFIG:-/usr/local/lib/docker}
                  - |
                    mkdir -p $DOCKER_CONFIG/cli-plugins
                  - |
                    curl -SL https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
                  - |
                    chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
                  - |
                    usermod -aG docker ec2-user
                  - |
                    mkdir -p $HOME/opencti
                  - |
                    cd $HOME/opencti
                  - |
                    git clone https://github.com/ryohei-kamiya/opencti-docker-sample.git docker
                  - |
                    cd docker
                  - |
                    (cat << EOF
                    OPENCTI_ADMIN_TOKEN=$(cat /proc/sys/kernel/random/uuid)
                    OPENCTI_BASE_URL=http://localhost:8080
                    MINIO_ROOT_USER=opencti
                    RABBITMQ_DEFAULT_USER=opencti
                    CONNECTOR_EXPORT_FILE_STIX_ID=$(cat /proc/sys/kernel/random/uuid)
                    CONNECTOR_EXPORT_FILE_CSV_ID=$(cat /proc/sys/kernel/random/uuid)
                    CONNECTOR_EXPORT_FILE_TXT_ID=$(cat /proc/sys/kernel/random/uuid)
                    CONNECTOR_IMPORT_FILE_STIX_ID=$(cat /proc/sys/kernel/random/uuid)
                    CONNECTOR_IMPORT_DOCUMENT_ID=$(cat /proc/sys/kernel/random/uuid)
                    CONNECTOR_CVE_ID=$(cat /proc/sys/kernel/random/uuid)
                    CONNECTOR_MITRE_ID=$(cat /proc/sys/kernel/random/uuid)
                    SMTP_HOSTNAME=localhost
                    ELASTIC_MEMORY_SIZE=4G
                    EOF
                    ) > .env
                  - !Sub "echo 'OPENCTI_ADMIN_EMAIL=${OpenCtiAdminEmail}' >> .env\n"
                  - !Sub "echo 'OPENCTI_ADMIN_PASSWORD=${OpenCtiAdminPassword}' >> .env\n"
                  - !Sub "echo 'MINIO_ROOT_PASSWORD=${OpenCtiAdminPassword}' >> .env\n"
                  - !Sub "echo 'RABBITMQ_DEFAULT_PASS=${OpenCtiAdminPassword}' >> .env\n"
                  - |
                    sysctl -w vm.max_map_count=1048575
                  - |
                    echo 'vm.max_map_count=1048575' >> /etc/sysctl.conf
                  - |
                    systemctl enable --now docker
                  - |
                    chown -R ec2-user:ec2-user $HOME
              mode: "000500"
              owner: root
              group: root
            /home/ec2-user/start-application:
              content: !Join
                - ""
                - - |
                    #!/bin/bash -e
                  - |
                    export HOME=/home/ec2-user
                  - |
                    export PATH=$PATH:/usr/local/bin
                  - |
                    cd $HOME/opencti/docker
                  - |
                    # Startup the application
                  - |
                    docker compose up -d
              mode: "000500"
              owner: root
              group: root
          commands:
            01_install_application:
              command: /tmp/install_application > /var/log/install_application.log
            02_configure_reboot:
              command: echo /home/ec2-user/start-application >> /etc/rc.local
            03_start_application:
              command: /home/ec2-user/start-application
            04_cleanup:
              command: rm -f /tmp/install_application
    Properties:
      ImageId: !Ref EC2InstanceAMI
      InstanceType: !Ref EC2InstanceInstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      EbsOptimized: false
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            VolumeType: !Ref EC2InstanceVolumeType
            VolumeSize: !Ref EC2InstanceVolumeSize
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId: !Ref PublicSubnet1
      UserData: !Base64
        "Fn::Join":
          - ""
          - - |
              #!/bin/bash -xe
            - |
              dnf install -y aws-cfn-bootstrap
            - "/opt/aws/bin/cfn-init -v "
            - "         --stack "
            - !Ref "AWS::StackId"
            - "         --resource EC2Instance "
            - "         --configsets full_install "
            - "         --region "
            - !Ref "AWS::Region"
            - |+

            - "/opt/aws/bin/cfn-signal -e $? "
            - "         --stack "
            - !Ref "AWS::StackId"
            - "         --resource EC2Instance "
            - "         --region "
            - !Ref "AWS::Region"
            - |+

    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
